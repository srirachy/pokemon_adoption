{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casey\\\\OneDrive\\\\Documents\\\\Work_Related\\\\Alphaworks\\\\awProjects\\\\Class_Projects\\\\pokemon_adoption\\\\src\\\\components\\\\PokemonApp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASETABLEURL = 'https://pokeapi.co/api/v2/pokemon?limit=100&offset=0';\nconst BASEURL = 'https://pokeapi.co/api/v2/';\nlet searchPokemon = ''; //way to search singular pokemon example\n//https://pokeapi.co/api/v2/pokemon/ditto\n//way to search type example\n//https://pokeapi.co/api/v2/type/3\n//way to populate initial table w/ 100 pokemon\n//https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\n\nconst PokemonApp = () => {\n  _s();\n\n  const [firstHunnitName, setFirstHunnitName] = useState(null);\n  const [firstHunnitUrl, setFirstHunnitUrl] = useState(null); //let initialPokemonState = firstHunnit;\n  //let pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\n  //const {results} = firstHunnit;\n  //useEffect for creating the initial table\n\n  useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(BASETABLEURL);\n      const data = await res.json();\n      console.log(data);\n      const fetchedPokemon = data.results;\n      console.log(fetchedPokemon.map(thePokemon => thePokemon.name));\n      const nameMap = fetchedPokemon.map(thePokemon => thePokemon.name);\n      const urlMap = fetchedPokemon.map(thePokemon => thePokemon.url);\n      setFirstHunnitName(nameMap);\n      setFirstHunnitUrl(urlMap[0]);\n      fetchHunnitData(); //good starting point\n      // const pokemonNames = data.results[0].name;\n      // console.log(`Pokemon Names: ${pokemonNames}`)\n      // setFirstHunnit(pokemonNames);\n      // console.log(firstHunnit + \"meow\");\n    };\n\n    getData();\n  }, []); // useEffect(() => {\n  //     firstHunnitUrl.forEach(pokemonUrl => {\n  //         const getData = async() => {\n  //             const res = await fetch(pokemonUrl);\n  //             const data = await res.json();\n  //             console.log(data);\n  //         };\n  //         getData();\n  //     })\n  // }, [firstHunnitUrl])\n\n  const fetchHunnitData = () => {}; // const checkPokemon = () => {\n  //     const initialPokemonState = firstHunnit;\n  //     const pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\n  // }\n  //checkPokemon();\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"See console for api data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), firstHunnitName && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: firstHunnitName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }, this), firstHunnitUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: firstHunnitUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PokemonApp, \"adgqbG52uzok3DLqagycTtkNkGw=\");\n\n_c = PokemonApp;\nexport default PokemonApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonApp\");","map":{"version":3,"sources":["C:/Users/casey/OneDrive/Documents/Work_Related/Alphaworks/awProjects/Class_Projects/pokemon_adoption/src/components/PokemonApp.jsx"],"names":["React","useEffect","useState","BASETABLEURL","BASEURL","searchPokemon","PokemonApp","firstHunnitName","setFirstHunnitName","firstHunnitUrl","setFirstHunnitUrl","getData","res","fetch","data","json","console","log","fetchedPokemon","results","map","thePokemon","name","nameMap","urlMap","url","fetchHunnitData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;AAEA,MAAMC,YAAY,GAAG,sDAArB;AACA,MAAMC,OAAO,GAAG,4BAAhB;AACA,IAAIC,aAAa,GAAG,EAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD,CAFqB,CAGrB;AACA;AACA;AAEA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,OAAO,GAAG,YAAY;AACxB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAACV,YAAD,CAAvB;AACA,YAAMW,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,YAAMI,cAAc,GAAGJ,IAAI,CAACK,OAA5B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,cAAc,CAACE,GAAf,CAAmBC,UAAU,IAAIA,UAAU,CAACC,IAA5C,CAAZ;AACA,YAAMC,OAAO,GAAGL,cAAc,CAACE,GAAf,CAAmBC,UAAU,IAAIA,UAAU,CAACC,IAA5C,CAAhB;AACA,YAAME,MAAM,GAAGN,cAAc,CAACE,GAAf,CAAmBC,UAAU,IAAIA,UAAU,CAACI,GAA5C,CAAf;AACAjB,MAAAA,kBAAkB,CAACe,OAAD,CAAlB;AACAb,MAAAA,iBAAiB,CAACc,MAAM,CAAC,CAAD,CAAP,CAAjB;AACAE,MAAAA,eAAe,GAVS,CAWxB;AACA;AACA;AACA;AACA;AACH,KAhBD;;AAiBAf,IAAAA,OAAO;AACV,GAnBQ,EAmBN,EAnBM,CAAT,CARqB,CA6BrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMe,eAAe,GAAG,MAAM,CAE7B,CAFD,CAzCqB,CA6CrB;AACA;AACA;AACA;AAEA;;;AAEA,sBACA;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKnB,eAAe,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFxB,EAGKE,cAAc,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAHvB;AAAA,kBADA;AAOH,CA3DD;;GAAMH,U;;KAAAA,U;AA6DN,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nconst BASETABLEURL = 'https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\r\nconst BASEURL = 'https://pokeapi.co/api/v2/'\r\nlet searchPokemon = ''\r\n//way to search singular pokemon example\r\n//https://pokeapi.co/api/v2/pokemon/ditto\r\n//way to search type example\r\n//https://pokeapi.co/api/v2/type/3\r\n//way to populate initial table w/ 100 pokemon\r\n//https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\r\n\r\nconst PokemonApp = () => {\r\n    const [firstHunnitName, setFirstHunnitName] = useState(null);\r\n    const [firstHunnitUrl, setFirstHunnitUrl] = useState(null);\r\n    //let initialPokemonState = firstHunnit;\r\n    //let pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\r\n    //const {results} = firstHunnit;\r\n\r\n    //useEffect for creating the initial table\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const res = await fetch(BASETABLEURL);\r\n            const data = await res.json();\r\n            console.log(data);\r\n            const fetchedPokemon = data.results;\r\n            console.log(fetchedPokemon.map(thePokemon => thePokemon.name));\r\n            const nameMap = fetchedPokemon.map(thePokemon => thePokemon.name);\r\n            const urlMap = fetchedPokemon.map(thePokemon => thePokemon.url);\r\n            setFirstHunnitName(nameMap);\r\n            setFirstHunnitUrl(urlMap[0]);\r\n            fetchHunnitData();\r\n            //good starting point\r\n            // const pokemonNames = data.results[0].name;\r\n            // console.log(`Pokemon Names: ${pokemonNames}`)\r\n            // setFirstHunnit(pokemonNames);\r\n            // console.log(firstHunnit + \"meow\");\r\n        };\r\n        getData();\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     firstHunnitUrl.forEach(pokemonUrl => {\r\n    //         const getData = async() => {\r\n    //             const res = await fetch(pokemonUrl);\r\n    //             const data = await res.json();\r\n    //             console.log(data);\r\n    //         };\r\n    //         getData();\r\n    //     })\r\n        \r\n    // }, [firstHunnitUrl])\r\n\r\n    const fetchHunnitData = () => {\r\n\r\n    }\r\n\r\n    // const checkPokemon = () => {\r\n    //     const initialPokemonState = firstHunnit;\r\n    //     const pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\r\n    // }\r\n\r\n    //checkPokemon();\r\n\r\n    return (\r\n    <>\r\n        <h1>See console for api data!</h1>\r\n        {firstHunnitName && <p>{firstHunnitName}</p>}\r\n        {firstHunnitUrl && <p>{firstHunnitUrl}</p>}\r\n    </> \r\n    );\r\n};\r\n\r\nexport default PokemonApp;"]},"metadata":{},"sourceType":"module"}