{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casey\\\\OneDrive\\\\Documents\\\\Work_Related\\\\Alphaworks\\\\awProjects\\\\Class_Projects\\\\pokemon_adoption\\\\src\\\\components\\\\PokemonApp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport RenderImages from './RenderImages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BASETABLEURL = 'https://pokeapi.co/api/v2/pokemon?limit=100&offset=0';\nconst BASEURL = 'https://pokeapi.co/api/v2/';\nlet searchPokemon = ''; //way to search singular pokemon example\n//https://pokeapi.co/api/v2/pokemon/ditto\n//way to search type example\n//https://pokeapi.co/api/v2/type/3\n//way to populate initial table w/ 100 pokemon\n//https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\n\nconst PokemonApp = () => {\n  _s();\n\n  const [firstHunnitName, setFirstHunnitName] = useState(null);\n  const [firstHunnitUrl, setFirstHunnitUrl] = useState(null);\n  const [oneImg, setOneImg] = useState('');\n  const [firstHunnitImg, setFirstHunnitImg] = useState(null); //let initialPokemonState = firstHunnit;\n  //let pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\n  //const {results} = firstHunnit;\n  //useEffect for creating the initial table\n\n  useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(BASETABLEURL);\n      const data = await res.json();\n      console.log(data);\n      const fetchedPokemon = data.results;\n      console.log(fetchedPokemon.map(thePokemon => thePokemon.name));\n      const nameMap = fetchedPokemon.map(thePokemon => thePokemon.name); //const urlMap = fetchedPokemon.map(thePokemon => thePokemon.url);\n\n      setFirstHunnitName(nameMap); //setFirstHunnitUrl(urlMap);\n      //good starting point\n      // const pokemonNames = data.results[0].name;\n      // console.log(`Pokemon Names: ${pokemonNames}`)\n      // setFirstHunnit(pokemonNames);\n      // console.log(firstHunnit + \"meow\");\n    };\n\n    getData();\n  }, []);\n  useEffect(() => {\n    getPokemon('pokemon/?limit=100&offset=0').then(res => setupPokemonTable(res.results));\n  }, []); //fetch for pokemon\n\n  const getPokemon = url => {\n    return fetch(BASEURL + url).then(result => {\n      return result.json();\n    });\n  }; //call getPokemon\n  //function to setup pokemon table?\n\n\n  const setupPokemonTable = list => {\n    list.forEach(pokemon => {\n      const imgElmts = [];\n      console.log(pokemon.name);\n      getPokemon('pokemon/' + pokemon.name).then(res => {\n        const img = res.sprites.front_default; // console.log(img);\n\n        imgElmts.push(img);\n      });\n      set;\n    });\n  }; // const checkPokemon = () => {\n  //     const initialPokemonState = firstHunnit;\n  //     const pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\n  // }\n  //checkPokemon();\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"See console for api data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), firstHunnitName && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: firstHunnitName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }, this), firstHunnitUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: firstHunnitUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(RenderImages, {\n      firstHunnitImg: firstHunnitImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PokemonApp, \"D3XRR4VLVqhuMatCxe7qsIgHmYA=\");\n\n_c = PokemonApp;\nexport default PokemonApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonApp\");","map":{"version":3,"sources":["C:/Users/casey/OneDrive/Documents/Work_Related/Alphaworks/awProjects/Class_Projects/pokemon_adoption/src/components/PokemonApp.jsx"],"names":["React","useEffect","useState","RenderImages","BASETABLEURL","BASEURL","searchPokemon","PokemonApp","firstHunnitName","setFirstHunnitName","firstHunnitUrl","setFirstHunnitUrl","oneImg","setOneImg","firstHunnitImg","setFirstHunnitImg","getData","res","fetch","data","json","console","log","fetchedPokemon","results","map","thePokemon","name","nameMap","getPokemon","then","setupPokemonTable","url","result","list","forEach","pokemon","imgElmts","img","sprites","front_default","push","set"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport RenderImages from './RenderImages'\r\n\r\nconst BASETABLEURL = 'https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\r\nconst BASEURL = 'https://pokeapi.co/api/v2/'\r\nlet searchPokemon = '';\r\n//way to search singular pokemon example\r\n//https://pokeapi.co/api/v2/pokemon/ditto\r\n//way to search type example\r\n//https://pokeapi.co/api/v2/type/3\r\n//way to populate initial table w/ 100 pokemon\r\n//https://pokeapi.co/api/v2/pokemon?limit=100&offset=0'\r\n\r\nconst PokemonApp = () => {\r\n    const [firstHunnitName, setFirstHunnitName] = useState(null);\r\n    const [firstHunnitUrl, setFirstHunnitUrl] = useState(null);\r\n    const [oneImg, setOneImg] = useState('')\r\n    const [firstHunnitImg, setFirstHunnitImg] = useState(null);\r\n    //let initialPokemonState = firstHunnit;\r\n    //let pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\r\n    //const {results} = firstHunnit;\r\n\r\n    //useEffect for creating the initial table\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const res = await fetch(BASETABLEURL);\r\n            const data = await res.json();\r\n            console.log(data);\r\n            const fetchedPokemon = data.results;\r\n            console.log(fetchedPokemon.map(thePokemon => thePokemon.name));\r\n            const nameMap = fetchedPokemon.map(thePokemon => thePokemon.name);\r\n            //const urlMap = fetchedPokemon.map(thePokemon => thePokemon.url);\r\n            setFirstHunnitName(nameMap);\r\n            //setFirstHunnitUrl(urlMap);\r\n            //good starting point\r\n            // const pokemonNames = data.results[0].name;\r\n            // console.log(`Pokemon Names: ${pokemonNames}`)\r\n            // setFirstHunnit(pokemonNames);\r\n            // console.log(firstHunnit + \"meow\");\r\n        };\r\n        getData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getPokemon('pokemon/?limit=100&offset=0').then(res => setupPokemonTable(res.results));\r\n    }, [])\r\n    //fetch for pokemon\r\n    const getPokemon = (url) => {\r\n        return fetch(BASEURL + url)\r\n        .then(result => {\r\n            return result.json();\r\n        })\r\n    }\r\n\r\n    //call getPokemon\r\n\r\n    //function to setup pokemon table?\r\n    const setupPokemonTable = (list) => {\r\n        list.forEach(pokemon => {\r\n            const imgElmts = [];\r\n            console.log(pokemon.name);\r\n            getPokemon('pokemon/' + pokemon.name).then(res => {\r\n                const img = res.sprites.front_default;\r\n                // console.log(img);\r\n                imgElmts.push(img);\r\n            })\r\n            set\r\n        })\r\n    }\r\n\r\n    // const checkPokemon = () => {\r\n    //     const initialPokemonState = firstHunnit;\r\n    //     const pokemonNames = firstHunnit.map(thePokemon => thePokemon.results.name)\r\n    // }\r\n\r\n    //checkPokemon();\r\n\r\n    return (\r\n    <>\r\n        <h1>See console for api data!</h1>\r\n        {firstHunnitName && <p>{firstHunnitName}</p>}\r\n        {firstHunnitUrl && <p>{firstHunnitUrl}</p>}\r\n        {/* {oneImg && <img src={oneImg} alt='pokemon'/>} */}\r\n        {/* <img src={oneImg} alt={oneImg}/> */}\r\n        <RenderImages firstHunnitImg={firstHunnitImg}></RenderImages>\r\n    </> \r\n    );\r\n};\r\n\r\nexport default PokemonApp;"]},"metadata":{},"sourceType":"module"}